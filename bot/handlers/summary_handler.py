import os
import pytz
from telegram import Update
from telegram.ext import ContextTypes
from services.ai_summary_service import AISummaryService
from services.database_service import DatabaseService
from datetime import datetime, timedelta
from handlers.food_handler import get_user_language

db_path = os.getenv('DATABASE_PATH', '/app/data/food_journal.db')
database_service = DatabaseService(db_path)
ai_summary_service = AISummaryService(os.getenv('OPENAI_API_KEY'), database_service)

def get_user_today_date(user_id: int) -> str:
    """Get today's date in the user's timezone, fallback to UTC"""
    try:
        user = database_service.get_user_by_telegram_id(user_id)
        if user and user.get('timezone'):
            user_tz = pytz.timezone(user['timezone'])
            now_in_user_tz = datetime.now(user_tz)
            return now_in_user_tz.strftime('%Y-%m-%d')
    except Exception:
        pass  # Fallback to UTC
    
    # Fallback to UTC if no timezone is set or error occurs
    return datetime.now(pytz.UTC).strftime('%Y-%m-%d')

async def daily_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Provide AI-generated daily nutrition summary"""
    user_id = update.effective_user.id
    today = get_user_today_date(user_id)
    user_language = get_user_language(user_id)
    
    loading_message = "ü§ñ Generating your personalized daily summary... This may take a moment." if user_language == 'en' else "ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
    no_data_message = "üìÖ No food entries found for today, or unable to generate AI analysis. Start logging your meals! üì∏" if user_language == 'en' else "üìÖ –ó–∞–ø–∏—Å–∏ –æ –µ–¥–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å AI –∞–Ω–∞–ª–∏–∑. –ù–∞—á–Ω–∏—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏! üì∏"
    error_message = "‚ùå Unable to generate AI summary right now. Please try again later." if user_language == 'en' else "‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å AI –æ—Ç—á–µ—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
    
    await update.message.reply_text(loading_message)
    
    try:
        ai_summary = await ai_summary_service.generate_daily_summary(user_id, today, user_language)
        
        if ai_summary:
            if user_language == 'ru':
                message = f"üåô **AI –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç –æ –ø–∏—Ç–∞–Ω–∏–∏ - {today}**\n\n"
                message += f"üìã **–†–µ–∑—é–º–µ:**\n{ai_summary.summary}\n\n"
                
                if ai_summary.key_observations:
                    message += "üîç **–ö–ª—é—á–µ–≤—ã–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è:**\n"
                    for obs in ai_summary.key_observations:
                        message += f"‚Ä¢ {obs}\n"
                    message += "\n"
                
                if ai_summary.nutrition_highlights:
                    message += "‚≠ê **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–∏—Ç–∞–Ω–∏—è:**\n"
                    for highlight in ai_summary.nutrition_highlights:
                        message += f"‚Ä¢ {highlight}\n"
                    message += "\n"
                
                if ai_summary.recommendations:
                    message += "üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
                    for rec in ai_summary.recommendations:
                        message += f"‚Ä¢ {rec}\n"
                    message += "\n"
            else:  # English
                message = f"üåô **AI Daily Nutrition Summary - {today}**\n\n"
                message += f"üìã **Summary:**\n{ai_summary.summary}\n\n"
                
                if ai_summary.key_observations:
                    message += "üîç **Key Observations:**\n"
                    for obs in ai_summary.key_observations:
                        message += f"‚Ä¢ {obs}\n"
                    message += "\n"
                
                if ai_summary.nutrition_highlights:
                    message += "‚≠ê **Nutrition Highlights:**\n"
                    for highlight in ai_summary.nutrition_highlights:
                        message += f"‚Ä¢ {highlight}\n"
                    message += "\n"
                
                if ai_summary.recommendations:
                    message += "üí° **Recommendations:**\n"
                    for rec in ai_summary.recommendations:
                        message += f"‚Ä¢ {rec}\n"
                    message += "\n"
            
            message += f"üåü **{ai_summary.motivational_message}**"
            
            await update.message.reply_text(message, parse_mode='Markdown')
        else:
            await update.message.reply_text(no_data_message)
            
    except Exception as e:
        print(f"Error generating daily AI summary: {e}")
        await update.message.reply_text(error_message)

async def weekly_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Provide AI-generated weekly nutrition summary"""
    user_id = update.effective_user.id
    user_language = get_user_language(user_id)
    
    loading_message = "ü§ñ Analyzing your weekly nutrition patterns... This may take a moment." if user_language == 'en' else "ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –Ω–µ–¥–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–∏—Ç–∞–Ω–∏—è... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
    no_data_message = "üìä Not enough data for AI weekly analysis. Keep logging your meals!" if user_language == 'en' else "üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏!"
    error_message = "‚ùå Unable to generate AI weekly analysis right now. Please try again later." if user_language == 'en' else "‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å AI –Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
    
    await update.message.reply_text(loading_message)
    
    try:
        ai_summary = await ai_summary_service.generate_weekly_summary(user_id, user_language)
        
        if ai_summary:
            if user_language == 'ru':
                message = f"üìä **AI –ù–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è**\n\n"
                message += f"üìù **–ù–µ–¥–µ–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ:**\n{ai_summary.summary}\n\n"
                
                if ai_summary.trends_analysis:
                    message += "üìà **–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤:**\n"
                    for trend in ai_summary.trends_analysis:
                        message += f"‚Ä¢ {trend}\n"
                    message += "\n"
                
                if ai_summary.achievements:
                    message += "üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏:**\n"
                    for achievement in ai_summary.achievements:
                        message += f"‚Ä¢ {achievement}\n"
                    message += "\n"
                
                if ai_summary.areas_for_improvement:
                    message += "üéØ **–û–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:**\n"
                    for area in ai_summary.areas_for_improvement:
                        message += f"‚Ä¢ {area}\n"
                    message += "\n"
                
                if ai_summary.personalized_recommendations:
                    message += "ÔøΩ **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
                    for rec in ai_summary.personalized_recommendations:
                        message += f"‚Ä¢ {rec}\n"
                    message += "\n"
                
                if ai_summary.next_week_goals:
                    message += "üöÄ **–¶–µ–ª–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é:**\n"
                    for goal in ai_summary.next_week_goals:
                        message += f"‚Ä¢ {goal}\n"
            else:  # English
                message = f"ÔøΩüìä **AI Weekly Nutrition Analysis**\n\n"
                message += f"üìù **Weekly Summary:**\n{ai_summary.summary}\n\n"
                
                if ai_summary.trends_analysis:
                    message += "üìà **Trends Analysis:**\n"
                    for trend in ai_summary.trends_analysis:
                        message += f"‚Ä¢ {trend}\n"
                    message += "\n"
                
                if ai_summary.achievements:
                    message += "üèÜ **This Week's Achievements:**\n"
                    for achievement in ai_summary.achievements:
                        message += f"‚Ä¢ {achievement}\n"
                    message += "\n"
                
                if ai_summary.areas_for_improvement:
                    message += "üéØ **Areas for Improvement:**\n"
                    for area in ai_summary.areas_for_improvement:
                        message += f"‚Ä¢ {area}\n"
                    message += "\n"
                
                if ai_summary.personalized_recommendations:
                    message += "üí° **Personalized Recommendations:**\n"
                    for rec in ai_summary.personalized_recommendations:
                        message += f"‚Ä¢ {rec}\n"
                    message += "\n"
                
                if ai_summary.next_week_goals:
                    message += "üöÄ **Goals for Next Week:**\n"
                    for goal in ai_summary.next_week_goals:
                        message += f"‚Ä¢ {goal}\n"
            
            await update.message.reply_text(message, parse_mode='Markdown')
        else:
            await update.message.reply_text(no_data_message)
            
    except Exception as e:
        print(f"Error generating weekly AI summary: {e}")
        await update.message.reply_text(error_message)