"""
Language detection and localization service for the food journal bot.
Supports English and Russian.
"""
import re
import logging
from typing import Optional, Dict, List
from dataclasses import dataclass

logger = logging.getLogger(__name__)

@dataclass
class LocalizedMessages:
    """Container for localized message templates"""
    
    # Analysis messages
    food_analysis_complete: str
    clarification_processed: str
    analyzing_food: str
    analyzing_audio: str
    analyzing_text: str
    processing_clarification: str
    
    # Nutrition labels
    calories: str
    protein: str
    carbs: str
    fat: str
    total_nutrition: str
    
    # Error messages
    unauthorized: str
    analysis_failed: str
    error_occurred: str
    failed_to_save: str
    
    # Clarification messages
    uncertainty_detected: str
    uncertain_items: str
    uncertainty_reasons: str
    clarification_request: str
    clarification_cancelled: str
    no_pending_clarification: str
    
    # Commands and help
    welcome_message: str
    help_message: str
    language_help_message: str
    language_set_message: str
    
    # Status messages
    transcription: str
    original_description: str
    pending_clarification_status: str


class LanguageService:
    """Service for language detection and localization"""
    
    # Russian alphabet pattern for detection
    CYRILLIC_PATTERN = re.compile(r'[–∞-—è—ë]', re.IGNORECASE)
    
    # Localized messages
    MESSAGES = {
        'en': LocalizedMessages(
            # Analysis messages
            food_analysis_complete="üçΩÔ∏è **Food Analysis Complete!**\n\n",
            clarification_processed="‚úÖ **Clarification processed! Final Food Analysis:**\n\n",
            analyzing_food="üîç Analyzing your food... This may take a moment.",
            analyzing_audio="üé§ Analyzing your audio... This may take a moment.",
            analyzing_text="üìù Analyzing your food description... This may take a moment.",
            processing_clarification="üîç Processing your clarification... This may take a moment.",
            
            # Nutrition labels
            calories="Calories",
            protein="Protein", 
            carbs="Carbs",
            fat="Fat",
            total_nutrition="**üìä Total Nutrition:**\n",
            
            # Error messages
            unauthorized="üö´ You are not authorized to use this bot.",
            analysis_failed="‚ùå Could not analyze the food. Please try with a clearer photo or more detailed description.",
            error_occurred="‚ùå An error occurred while analyzing your food. Please try again.",
            failed_to_save="‚ùå Failed to save food entry. Please try again.",
            
            # Clarification messages
            uncertainty_detected="‚ö†Ô∏è I have some uncertainties about your food:\n\n",
            uncertain_items="**Uncertain items:**\n",
            uncertainty_reasons="**Reasons for uncertainty:**\n",
            clarification_request="Please send another photo, voice message, or text description with clarification so I can provide accurate nutrition information!",
            clarification_cancelled="‚úÖ Clarification request cancelled. You can now send new food photos, voice messages, or text descriptions.",
            no_pending_clarification="‚ÑπÔ∏è No pending clarification to cancel.",
            
            # Commands and help
            welcome_message="""üçΩÔ∏è **Welcome to AI Food Journal Bot!**

üì∏ **Send me a photo of your food** and I'll analyze it for you!
üé§ **Send me a voice message** describing what you ate!
üìù **Send me a text message** describing your meal!

**Available Commands:**
/daily - Get AI-generated daily nutrition summary
/weekly - Get AI-powered weekly analysis with insights
/settimezone <tz> - Set your timezone (e.g., /settimezone Europe/Berlin)
/setlanguage <lang> - Set your language preference (en/ru)
/status - Check if you have pending clarification requests
/cancel - Cancel pending clarification and start over
/help - Show this help message

**ü§ñ AI-Powered Features:**
üåô **Smart Daily Summaries** - Delivered at 9 PM with personalized insights
üìä **Weekly AI Analysis** - Comprehensive reports every Sunday at 8 PM
üí° **Personalized Recommendations** - Based on your actual eating patterns
üß† **Smart Clarification** - I'll ask for clarification when uncertain about your food

Just send a food photo, voice message, or text description to get started! üöÄ""",
            
            help_message="""ü§ñ **AI Food Journal Bot Help**

**How to use:**
1. üì∏ Send a photo of your food OR üé§ Send a voice message OR üìù Send a text message describing it
2. ü§ñ I'll analyze it with AI and log the nutrition info
3. üß† If I'm uncertain, I'll ask for clarification before saving
4. üìä Get personalized AI summaries automatically

**Commands:**
/daily - Get today's AI nutrition analysis
/weekly - Get this week's AI-powered insights
/settimezone <tz> - Set your timezone (e.g., /settimezone Europe/Berlin)
/setlanguage <lang> - Set your language preference (en/ru)
/status - Check if you have pending clarification requests
/cancel - Cancel pending clarification and start over
/start - Welcome message
/help - This help message

**üß† Smart Clarification Process:**
1. Send your food photo/audio/text
2. If I'm uncertain, I'll ask for clarification
3. Send another photo/voice/text message to clarify
4. I'll combine both to create accurate nutrition data

**Tips:**
‚Ä¢ Take clear, well-lit photos of your entire meal
‚Ä¢ Speak clearly when recording voice messages
‚Ä¢ Be specific about quantities and ingredients in text descriptions""",

            language_help_message="""üåç **Language Settings**

To change your language preference, use:
/setlanguage en (for English)
/setlanguage ru (for Russian)

Example: `/setlanguage ru`

The bot will automatically detect language from your messages, but you can set a preference with this command.""",

            language_set_message="‚úÖ **Language preference updated!** I'll now respond in English by default.",
            
            # Status messages
            transcription="üé§ **Transcription:**",
            original_description="üìù **Original Description:**",
            pending_clarification_status="‚è≥ **You have a pending clarification request:**\n\n",
        ),
        
        'ru': LocalizedMessages(
            # Analysis messages
            food_analysis_complete="üçΩÔ∏è **–ê–Ω–∞–ª–∏–∑ –ø–∏—â–∏ –∑–∞–≤–µ—Ä—à—ë–Ω!**\n\n",
            clarification_processed="‚úÖ **–£—Ç–æ—á–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ! –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∏—â–∏:**\n\n",
            analyzing_food="üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à—É –µ–¥—É... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            analyzing_audio="üé§ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ –∞—É–¥–∏–æ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            analyzing_text="üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –µ–¥—ã... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            processing_clarification="üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            
            # Nutrition labels
            calories="–ö–∞–ª–æ—Ä–∏–∏",
            protein="–ë–µ–ª–∫–∏",
            carbs="–£–≥–ª–µ–≤–æ–¥—ã", 
            fat="–ñ–∏—Ä—ã",
            total_nutrition="**üìä –û–±—â–∞—è –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**\n",
            
            # Error messages
            unauthorized="üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.",
            analysis_failed="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å –±–æ–ª–µ–µ —á—ë—Ç–∫–∏–º —Ñ–æ—Ç–æ –∏–ª–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º.",
            error_occurred="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–∞—à–µ–π –µ–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            failed_to_save="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –µ–¥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            
            # Clarification messages
            uncertainty_detected="‚ö†Ô∏è –£ –º–µ–Ω—è –µ—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤–∞—à–µ–π –µ–¥—ã:\n\n",
            uncertain_items="**–ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:**\n",
            uncertainty_reasons="**–ü—Ä–∏—á–∏–Ω—ã –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç–∏:**\n",
            clarification_request="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å —É—Ç–æ—á–Ω–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏!",
            clarification_cancelled="‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ –µ–¥—ã, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è.",
            no_pending_clarification="‚ÑπÔ∏è –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —É—Ç–æ—á–Ω–µ–Ω–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            
            # Commands and help
            welcome_message="""üçΩÔ∏è **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–ò –ë–æ—Ç –î–Ω–µ–≤–Ω–∏–∫–∞ –ü–∏—Ç–∞–Ω–∏—è!**

üì∏ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–π –µ–¥—ã**, –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ—ë –¥–ª—è –≤–∞—Å!
üé§ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ**, –æ–ø–∏—Å—ã–≤–∞—é—â–µ–µ —á—Ç–æ –≤—ã –µ–ª–∏!
üìù **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ**, –æ–ø–∏—Å—ã–≤–∞—é—â–µ–µ –≤–∞—à—É –µ–¥—É!

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/daily - –ü–æ–ª—É—á–∏—Ç—å –ò–ò-–∞–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ –¥–µ–Ω—å
/weekly - –ü–æ–ª—É—á–∏—Ç—å –ò–ò-–∞–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é —Å –∏–Ω—Å–∞–π—Ç–∞–º–∏
/settimezone <tz> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, /settimezone Europe/Moscow)
/setlanguage <lang> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (en/ru)
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å –æ–∂–∏–¥–∞—é—â–µ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏

**ü§ñ –ò–ò-—Ñ—É–Ω–∫—Ü–∏–∏:**
üåô **–£–º–Ω—ã–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–≤–æ–¥–∫–∏** - –î–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –≤ 21:00 —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏–Ω—Å–∞–π—Ç–∞–º–∏
üìä **–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ò–ò-–∞–Ω–∞–ª–∏–∑** - –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –æ—Ç—á—ë—Ç—ã –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 20:00
üí° **–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏** - –ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –ø–∏—Ç–∞–Ω–∏—è
üß† **–£–º–Ω—ã–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è** - –Ø –ø–æ–ø—Ä–æ—à—É —É—Ç–æ—á–Ω–µ–Ω–∏—è, –∫–æ–≥–¥–∞ –Ω–µ —É–≤–µ—Ä–µ–Ω –≤ –≤–∞—à–µ–π –µ–¥–µ

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üöÄ""",
            
            help_message="""ü§ñ **–ü–æ–º–æ—â—å –ø–æ –ò–ò –ë–æ—Ç—É –î–Ω–µ–≤–Ω–∏–∫–∞ –ü–∏—Ç–∞–Ω–∏—è**

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–π –µ–¥—ã –ò–õ–ò üé§ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ò–õ–ò üìù —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
2. ü§ñ –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —ç—Ç–æ —Å –ø–æ–º–æ—â—å—é –ò–ò –∏ –∑–∞–ø–∏—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
3. üß† –ï—Å–ª–∏ —è –Ω–µ —É–≤–µ—Ä–µ–Ω, —è –ø–æ–ø—Ä–æ—à—É —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
4. üìä –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ò–ò-—Å–≤–æ–¥–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

**–ö–æ–º–∞–Ω–¥—ã:**
/daily - –ü–æ–ª—É—á–∏—Ç—å –ò–ò-–∞–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/weekly - –ü–æ–ª—É—á–∏—Ç—å –ò–ò-–∏–Ω—Å–∞–π—Ç—ã –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é
/settimezone <tz> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, /settimezone Europe/Moscow)
/setlanguage <lang> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (en/ru)
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å –æ–∂–∏–¥–∞—é—â–µ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏

**üß† –ü—Ä–æ—Ü–µ—Å—Å —É–º–Ω–æ–≥–æ —É—Ç–æ—á–Ω–µ–Ω–∏—è:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–∞—É–¥–∏–æ/—Ç–µ–∫—Å—Ç –≤–∞—à–µ–π –µ–¥—ã
2. –ï—Å–ª–∏ —è –Ω–µ —É–≤–µ—Ä–µ–Ω, —è –ø–æ–ø—Ä–æ—à—É —É—Ç–æ—á–Ω–µ–Ω–∏—è
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ/–≥–æ–ª–æ—Å–æ–≤–æ–µ/—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è
4. –Ø –æ–±—ä–µ–¥–∏–Ω—é –æ–±–∞, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

**–°–æ–≤–µ—Ç—ã:**
‚Ä¢ –î–µ–ª–∞–π—Ç–µ —á—ë—Ç–∫–∏–µ, —Ö–æ—Ä–æ—à–æ –æ—Å–≤–µ—â—ë–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –≤—Å–µ–π –≤–∞—à–µ–π –µ–¥—ã
‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç–µ —á—ë—Ç–∫–æ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞—Ö –∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞—Ö –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–ø–∏—Å–∞–Ω–∏—è—Ö""",

            language_help_message="""üåç **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞**

–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
/setlanguage en (–¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ)
/setlanguage ru (–¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ)

–ü—Ä–∏–º–µ—Ä: `/setlanguage ru`

–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ –∏–∑ –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π.""",

            language_set_message="‚úÖ **–Ø–∑—ã–∫–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã!** –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.",
            
            # Status messages
            transcription="üé§ **–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:**",
            original_description="üìù **–ò—Å—Ö–æ–¥–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:**",
            pending_clarification_status="‚è≥ **–£ –≤–∞—Å –µ—Å—Ç—å –æ–∂–∏–¥–∞—é—â–∏–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ:**\n\n",
        )
    }
    
    def detect_language(self, text: str) -> str:
        """
        Detect language from text input.
        Returns 'ru' for Russian, 'en' for English (default).
        """
        if not text or not text.strip():
            return 'en'  # Default to English
        
        # Count Cyrillic characters
        cyrillic_chars = len(self.CYRILLIC_PATTERN.findall(text))
        total_letters = len(re.findall(r'[a-zA-Z–∞-—è—ë–ê-–Ø–Å]', text))
        
        if total_letters == 0:
            return 'en'  # Default to English if no letters
        
        # If more than 30% of letters are Cyrillic, consider it Russian
        cyrillic_ratio = cyrillic_chars / total_letters
        return 'ru' if cyrillic_ratio > 0.3 else 'en'
    
    def get_messages(self, language: str) -> LocalizedMessages:
        """Get localized messages for the specified language"""
        return self.MESSAGES.get(language, self.MESSAGES['en'])
    
    def format_nutrition_response(self, language: str, analysis, description: str = None, 
                                is_clarification: bool = False, is_audio: bool = False, 
                                is_text: bool = False) -> str:
        """Format the nutrition response in the specified language"""
        messages = self.get_messages(language)
        
        # Build response message
        if is_clarification:
            if description:
                if is_audio:
                    response = f"{messages.transcription} \"{description}\"\n\n"
                else:
                    response = f"{messages.original_description} \"{description}\"\n\n"
            else:
                response = ""
            response += messages.clarification_processed
        else:
            if description:
                if is_audio:
                    response = f"{messages.transcription} \"{description}\"\n\n"
                elif is_text:
                    response = f"{messages.original_description} \"{description}\"\n\n"
                else:
                    response = ""
            else:
                response = ""
            response += messages.food_analysis_complete
        
        # Add food items
        for item in analysis.food_items:
            response += f"üìç **{item.name}** ({item.quantity})\n"
            response += f"   ‚Ä¢ {messages.calories}: {getattr(item.nutrition, 'calories', 0.0):.0f} kcal\n"
            response += f"   ‚Ä¢ {messages.protein}: {getattr(item.nutrition, 'protein', 0.0):.1f}g\n"
            response += f"   ‚Ä¢ {messages.carbs}: {getattr(item.nutrition, 'carbs', 0.0):.1f}g\n"
            response += f"   ‚Ä¢ {messages.fat}: {getattr(item.nutrition, 'fat', 0.0):.1f}g\n\n"
        
        # Add total nutrition
        response += messages.total_nutrition
        response += f"üî• {messages.calories}: {analysis.total_nutrition.calories:.0f} kcal\n"
        response += f"üí™ {messages.protein}: {analysis.total_nutrition.protein:.1f}g\n"
        response += f"üåæ {messages.carbs}: {analysis.total_nutrition.carbs:.1f}g\n"
        response += f"ü•ë {messages.fat}: {analysis.total_nutrition.fat:.1f}g"
        
        return response
    
    def format_clarification_request(self, language: str, analysis, description: str = None,
                                   is_audio: bool = False, is_text: bool = False) -> str:
        """Format clarification request in the specified language"""
        messages = self.get_messages(language)
        
        clarification_msg = ""
        
        # Add original description if available
        if description:
            if is_audio:
                clarification_msg += f"{messages.transcription} \"{description}\"\n\n"
            elif is_text:
                clarification_msg += f"{messages.original_description} \"{description}\"\n\n"
        
        clarification_msg += messages.uncertainty_detected
        
        if analysis.uncertainty.uncertain_items:
            clarification_msg += messages.uncertain_items
            for item in analysis.uncertainty.uncertain_items:
                clarification_msg += f"‚Ä¢ {item}\n"
            clarification_msg += "\n"
        
        if analysis.uncertainty.uncertainty_reasons:
            clarification_msg += messages.uncertainty_reasons
            for reason in analysis.uncertainty.uncertainty_reasons:
                clarification_msg += f"‚Ä¢ {reason}\n"
            clarification_msg += "\n"
        
        clarification_msg += messages.clarification_request
        
        return clarification_msg


# Global language service instance
language_service = LanguageService()
